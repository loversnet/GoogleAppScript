function createPDF() {
  
  var ssid = "　【スプシのID】";
  
  var objSpreadsheet = SpreadsheetApp.getActiveSpreadsheet();
	// スプレッドシート
  var datass = objSpreadsheet.getSheetByName("【スプシの該当シート名】");
  var pdfss = objSpreadsheet.getSheetByName("【PDFに変更するシート名】");
  var request_date = Utilities.formatDate(new Date(),"Asia/Tokyo","YYYY-MM-dd");
  
  //最終行
  //var newdatalow = datass.getLastRow();
  
	// 選択セル範囲
	var range = datass.getActiveRange();
	// セル範囲の行番号
  var rowIndex = range.getRowIndex();
  
	// セル範囲の列番号
	var colIndex = range.getColumnIndex();
  
  //var arydata = datass.getRange(newdatalow, 1, 1, 30).getValues(); //質問項目が増えたら「30」のところを増やします。
  var arydata = datass.getRange(rowIndex, 1, 1, 30).getValues(); //質問項目が増えたら「30」のところを増やします。
  
 //Logger.log(arydata);
  var DocumentNumber = String(rowIndex-1); //アンケートの採番用にインデックス行を除いて1から管理番号として設定します。"2019" + String(lastrow-1)としたり、応用の幅があります。
  
  var data = arydata[0];
   
    
  pdfss.getRange("B1").setValue(DocumentNumber);
  pdfss.getRange("B4").setValue(data[1]); //項目１
  pdfss.getRange("B8").setValue(data[3]); //項目２
  pdfss.getRange("B12").setValue(data[4]); //項目３
  pdfss.getRange("B16").setValue(data[5]); //項目４
  pdfss.getRange("B20").setValue(data[6]); //項目５
  pdfss.getRange("B24").setValue(data[7]); //項目６
  pdfss.getRange("B28").setValue(data[8]); //項目７
  pdfss.getRange("B32").setValue(data[9]); //項目８
  pdfss.getRange("B36").setValue(data[10]); //項目９
  pdfss.getRange("B40").setValue(data[11]); //項目10
  pdfss.getRange("B44").setValue(data[12]); //項目11
  pdfss.getRange("B48").setValue(data[13]); //項目12
  
  //作成したシートのコピー作成
    var copysheet = pdfss.copyTo(objSpreadsheet).setName(request_date + "_" + name + "_" + DocumentNumber); 
  
  copysheet.activate();
   objSpreadsheet.moveActiveSheet(3);
  
//コピーしたシートid取得  
  var pdfsheetid = copysheet.getSheetId();  
  
  //以下PDF化のためのプログラムです。今回はA4サイズでPDF化するため、オプション設定も下記のようになります。
  var url = "https://docs.google.com/spreadsheets/d/SSID/export?".replace("SSID", ssid);
  var url_ext = [];

  var opts = {
    format: "pdf",
    size: "A4",
    fzr: "false",
    portrait: "true",
    gridlines: "false",
    printtitle: "false",
    pagenumbers: "false",
    fitw: "true",
    sheetnames: "false",
    gid: pdfsheetid
  };

  // 上記のoptsのオプション名と値を「=」で繋げて配列url_extに格納
  for (optName in opts) {
    url_ext.push(optName + "=" + opts[optName]);
  }

  // url_extの各要素を「&」で繋げる
  var options = url_ext.join("&");
  Logger.log(options)

  try {
    // API使用のためのOAuth認証
    var token = ScriptApp.getOAuthToken();

Logger.log(url + options)    
    
    var response = UrlFetchApp.fetch(url + options, {
      headers: {
        "Authorization": "Bearer " + token
      }
    });

    // ファイル名を作成「応募日時_名前_管理番号.pdf」
    var fileName = request_date + "_" + name + "_" + DocumentNumber + ".pdf";
    // Googleドライブでフォルダを作成してURLからIDを入力
    var folder = DriveApp.getFolderById("1uj9Kb7qNEDbJaC3BLH8889tcJQSMU550");
    //var folder = DriveApp.getFolderById("1jYSIxWjt4IWiqU7gruH5MyM8C5RQMsM-"); // tnmt test
    var fileBlob = response.getBlob().setName(fileName);

    Logger.log(fileName);
    
    folder.createFile(fileBlob);

    
 
    
    
  } catch (e) {
    Logger.log("ファイル生成に失敗しました" + e)
  }
  
  sendToSlack(data[0]);
  
//  return data;
}


function sendToSlack(name) {
  
  var text = name;
  text += "【メッセージ】";
  //text += "【この通知はテストです】";
  var channel = "【Slackで通知したいチャンネル（#つける）】"
  var url = "【SlackチャンネルのWebHookURL】";
　var post_data = { "channel" : channel, "username" : "【通知時の名前】", "text" : text, "icon_emoji" : "【表示するアイコン（::で囲う）】" };
  var payload = JSON.stringify(post_data);
  var options = {
    "method" : "POST",
    "contentType" : "application/json",
    "payload" : payload
  };
  var response = UrlFetchApp.fetch(url, options);
}

function delete_sheets(){
　var bk = SpreadsheetApp.getActiveSpreadsheet();
　var cnt = bk.getNumSheets();

  Logger.log(cnt);

  for(var i = 0; i < cnt-30; i++){
　　var sh = bk.getSheets()[50];
　　bk.deleteSheet(sh);
　}
}
